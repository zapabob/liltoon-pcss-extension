using UnityEditor;using UnityEngine;using System.Linq;public class ShaderAutoConverter : AssetPostprocessor{    // 繝｢繝・Ν繧､繝ｳ繝昴・繝亥ｾ後↓繝槭ユ繝ｪ繧｢繝ｫ縺ｮ繧ｷ繧ｧ繝ｼ繝繝ｼ繧定・蜍募､画鋤    void OnPostprocessModel(GameObject root)    {        // 繧､繝ｳ繝昴・繝医＆繧後◆繝｢繝・Ν蜀・・縺吶∋縺ｦ縺ｮRenderer繧ｳ繝ｳ繝昴・繝阪Φ繝医ｒ蜿門ｾ・       Renderer[] renderers = root.GetComponentsInChildren<Renderer>(true);        foreach (Renderer renderer in renderers)        {            foreach (Material material in renderer.sharedMaterials)            {                if (material == null)                {                    Debug.LogWarning($"[ShaderAutoConverter] Material is null on renderer: {renderer.name}. Skipping shader conversion.");                    continue;                }                // 迴ｾ蝨ｨ縺ｮ繧ｷ繧ｧ繝ｼ繝繝ｼ蜷阪ｒ蜿門ｾ・               string currentShaderName = material.shader.name;                // 螟画鋤蟇ｾ雎｡縺ｮ繧ｷ繧ｧ繝ｼ繝繝ｼ繝ｪ繧ｹ繝・               string[] targetShaderNames = new string[]                {                    "Standard",                    "Universal Render Pipeline/Lit",                    // 莉悶↓閾ｪ蜍募､画鋤縺励◆縺・す繧ｧ繝ｼ繝繝ｼ蜷阪′縺ゅｌ縺ｰ縺薙％縺ｫ霑ｽ蜉                };                // lilToon縺ｾ縺溘・lilToon PCSS Extension繧ｷ繧ｧ繝ｼ繝繝ｼ繧呈､懃ｴ｢                Shader lilToonShader = Shader.Find("lilToon");                Shader lilToonPCSSShader = Shader.Find("lilToon/lilToon_PCSS"); // PCSS Extension縺ｮ繧ｷ繧ｧ繝ｼ繝繝ｼ蜷阪↓蜷医ｏ縺帙※隱ｿ謨ｴ                Shader targetNewShader = null;                // 蜆ｪ蜈磯・ｽ・ PCSS Extension -> lilToon                if (lilToonPCSSShader != null)                {                    targetNewShader = lilToonPCSSShader;                }                else if (lilToonShader != null)                {                    targetNewShader = lilToonShader;                }                // 螟画鋤蟇ｾ雎｡縺ｮ繧ｷ繧ｧ繝ｼ繝繝ｼ縺ｧ縺ゅｊ縲√°縺､譁ｰ縺励＞繧ｷ繧ｧ繝ｼ繝繝ｼ縺瑚ｦ九▽縺九▲縺溷ｴ蜷・               if (targetShaderNames.Contains(currentShaderName) && targetNewShader != null)                {                    // 繝ｦ繝ｼ繧ｶ繝ｼ縺ｫ遒ｺ隱阪ム繧､繧｢繝ｭ繧ｰ繧定｡ｨ遉ｺ                    if (EditorUtility.DisplayDialog(                        "Shader Auto Converter",                        $"繝｢繝・Ν '{root.name}' 縺ｮ繝槭ユ繝ｪ繧｢繝ｫ '{material.name}' 縺・'{currentShaderName}' 繧ｷ繧ｧ繝ｼ繝繝ｼ繧剃ｽｿ逕ｨ縺励※縺・∪縺・\n" +                        $"縺薙ｌ繧・'{targetNewShader.name}' 繧ｷ繧ｧ繝ｼ繝繝ｼ縺ｫ閾ｪ蜍募､画鋤縺励∪縺吶°・・,                        "縺ｯ縺・,                        "縺・＞縺・))                    {                        // 繧ｷ繧ｧ繝ｼ繝繝ｼ繧貞､画鋤                        material.shader = targetNewShader;                        Debug.Log($"[ShaderAutoConverter] Converted material '{material.name}' shader from '{currentShaderName}' to '{targetNewShader.name}'.");                        // 蠢・ｦ√↓蠢懊§縺ｦ縲∝渕譛ｬ逧・↑繝励Ο繝代ユ繧｣繧偵さ繝斐・・井ｾ・ Main Color, Main Texture・・                       // 縺薙％縺ｧ縺ｯ蝓ｺ譛ｬ逧・↑繝励Ο繝代ユ繧｣縺ｮ縺ｿ繧偵さ繝斐・縺励∪縺吶・                       // 繧医ｊ隧ｳ邏ｰ縺ｪ繝励Ο繝代ユ繧｣縺ｮ繝槭ャ繝斐Φ繧ｰ縺悟ｿ・ｦ√↑蝣ｴ蜷医・縲√％縺薙↓霑ｽ蜉繝ｭ繧ｸ繝・け繧定ｨ倩ｿｰ縺励※縺上□縺輔＞縲・                       if (material.HasProperty("_Color") && material.HasProperty("_MainTex"))                        {                            Color color = material.color;                            Texture mainTex = material.mainTexture;                            material.SetColor("_Color", color);                            material.SetTexture("_MainTex", mainTex);                        }                    }                    else                    {                        Debug.Log($"[ShaderAutoConverter] User declined shader conversion for material '{material.name}'.");                    }                }                else if (targetShaderNames.Contains(currentShaderName) && targetNewShader == null)                {                    Debug.LogWarning($"[ShaderAutoConverter] Could not find 'lilToon' or 'lilToon/lilToon_PCSS' shader in the project. Material '{material.name}' shader '{currentShaderName}' was not converted.");                }            }        }    }}
